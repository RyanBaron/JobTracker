{"version":3,"sources":["../../src/controller/company.js"],"names":["config","db","api","post","req","res","newCompany","name","body","url","city","state","geometry","coordinates","lat","long","save","err","send","json","message","get","find","companies","findById","params","id","company","put","status","delete","remove","_id","job","newJob","title","type","pay","jobs","push"],"mappings":"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","file":"company.js","sourcesContent":["import mongoose   from 'mongoose';\nimport { Router } from 'express';\nimport Company    from '../models/company';\nimport Job        from '../models/job';\n\n//use this to lock down any route by putting 'authenticate' between the route path and (req, res)\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({config, db}) => {\n  let api = Router();\n\n  //CRUD - Creaate Read Update Delete\n\n  //'/v1/company/add' - create\n  api.post('/add', authenticate, (req, res) => {\n    let newCompany = new Company();\n\n    newCompany.name     = req.body.name;\n    newCompany.url      = req.body.url;\n    newCompany.city     = req.body.city;\n    newCompany.state    = req.body.state;\n    newCompany.geometry.coordinates.lat   = req.body.geometry.coordinates.lat;\n    newCompany.geometry.coordinates.long  = req.body.geometry.coordinates.long;\n\n    newCompany.save(err =>{\n      if(err) {\n        res.send(err);\n      }\n      //notify the client that the company was saved successfully\n      res.json({message: 'Company saved successfully'});\n    });\n  });\n\n  //'v1/company' - Read\n  api.get('/', (req, res) => {\n    //empty {} = return all\n    Company.find({}, (err, companies) => {\n      if(err) {\n        res.send(err);\n      }\n      //send back all companies\n      res.json(companies);\n    });\n  });\n\n  //'v1/company/:id' - Read id\n  api.get('/:id', (req, res) => {\n    Company.findById(req.params.id, (err, company) =>{\n      if(err) {\n        res.send(err);\n      }\n      //send back the found comapny\n      res.json(company);\n    });\n  });\n\n  //'v1/company/:id' - Update\n  api.put('/:id', authenticate, (req, res) => {\n    Company.findById(req.params.id, (err, company) => {\n      if(err) {\n        res.status(500).send(err);\n        return;\n      }\n\n      company.name = req.body.name;\n      company.url      = req.body.url;\n      company.city     = req.body.city;\n      company.state    = req.body.state;\n      company.geometry.coordinates.lat   = req.body.geometry.coordinates.lat;\n      company.geometry.coordinates.long  = req.body.geometry.coordinates.long;\n\n      company.save(err => {\n        if(err) {\n          res.send(err);\n        }\n        //send back a job updated success message\n        res.json({message: \"Company info updated!\"});\n      });\n    });\n  });\n\n  //'v1/company/:id' - Delete\n  api.delete(\"/:id\", authenticate, (req, res) => {\n    Company.findById(req.params.id, (err, company) =>{\n      if(err) {\n        res.status(500).send(err);\n        return;\n      }\n      if(company === null) {\n        res.status(404).send(\"Company Not found\");\n        return;\n      }\n      Company.remove({\n          _id: req.params.id\n      }, (err, company) => {\n        if(err) {\n          res.status(500).send(err);\n          return;\n        }\n        //remove company jobs if we are removing a company\n        Job.remove({\n          company: req.params.id\n        }, (err, job) => {\n          if(err) {\n            res.send(err);\n          }\n          //send back a job deleted success message\n          res.json({message: \"Company successfully removed!\"});\n        });\n      });\n    });\n  });\n\n  //'/v1/company/job/add/:id' - create\n  api.post('/job/add/:id', authenticate, (req, res) => {\n    Company.findById(req.params.id, (err, company) => {\n      if(err){\n        res.send(err);\n      }\n\n      let newJob  = new Job();\n      //set the new job properties\n      newJob.title    = req.body.title;\n      newJob.url      = req.body.url;\n      newJob.type     = req.body.type;\n      newJob.pay      = req.body.pay;\n      newJob.status   = req.body.status;\n      newJob.company  = company._id;\n      //save the new job\n      newJob.save(err =>{\n        if(err) {\n          res.send(err);\n        }\n        company.jobs.push(newJob);\n        company.save(err => {\n          if(err) {\n            res.send(err);\n          }\n          //notify the client that the company was saved successfully\n          res.json({message: 'Company job saved'});\n        });\n      });\n    });\n  });\n\n  //get jobs for a specific company id\n  //'/v1/company/jobs/:id'\n  api.get('/jobs/:id', (req, res) => {\n    Job.find({company: req.params.id}, (err, jobs) => {\n      if(err) {\n        res.send(err);\n      }\n      res.json(jobs);\n    });\n  });\n\n  return api;\n}\n"]}